generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_CONNECTION_STRING")
}

enum QuizType {
  BRAINWAVES
  SHARK

  @@map("quiz_type")
}

enum QuizImageState {
  PENDING_UPLOAD
  READY

  @@map("quiz_image_state")
}

enum QuizAIProcessingState {
  NOT_QUEUED
  QUEUED
  COMPLETED
  ERRORED

  @@map("quiz_ai_processing_state")
}

model Quiz {
  id               String   @id
  type             QuizType
  date             DateTime @db.Date
  uploadedAt       DateTime @map("uploaded_at")
  uploadedByUserId String   @map("uploaded_by_user_id")
  aiProcessingState QuizAIProcessingState @map("ai_processing_state") @default(NOT_QUEUED)
  aiProcessingCertaintyPercent Decimal? @map("ai_processing_certainty_percent")
  aiProcessingModel String? @map("ai_processing_model")

  completions    QuizCompletion[]
  images         QuizImage[]
  notes          QuizNote[]
  questions      QuizQuestion[]
  uploadedByUser User             @relation(fields: [uploadedByUserId], references: [id])

  @@unique(fields: [date, type])
  @@map("quiz")
}

enum QuizImageType {
  QUESTION
  ANSWER
  QUESTION_AND_ANSWER

  @@map("quiz_image_type")
}

model QuizImage {
  imageKey String         @id @map("image_key")
  quizId   String         @map("quiz_id")
  type     QuizImageType
  state    QuizImageState

  quiz Quiz @relation(fields: [quizId], references: [id])

  @@map("quiz_image")
}

model QuizCompletion {
  id          String   @id
  quizId      String   @map("quiz_id")
  completedAt DateTime @map("completed_at")
  score       Decimal

  quiz        Quiz                 @relation(fields: [quizId], references: [id])
  questionResults QuizCompletionQuestionResult[]
  completedBy QuizCompletionUser[]

  @@map("quiz_completion")
}

model QuizCompletionUser {
  quizCompletionId String @map("quiz_completion_id")
  userId           String @map("user_id")

  user User @relation(fields: [userId], references: [id])

  quizCompletion QuizCompletion @relation(fields: [quizCompletionId], references: [id])

  @@id([quizCompletionId, userId])
  @@map("quiz_completion_user")
}

enum QuizCompletionQuestionResultScore {
  CORRECT
  INCORRECT
  HALF_CORRECT

  @@map("quiz_completion_question_result_score")
}

model QuizCompletionQuestionResult {
  id                 String @id
  quizCompletionId   String @map("quiz_completion_id")
  questionId         String @map("question_id")
  score              QuizCompletionQuestionResultScore

  quizCompletion QuizCompletion @relation(fields: [quizCompletionId], references: [id])
  question       QuizQuestion   @relation(fields: [questionId], references: [id])

  @@map("quiz_completion_question_result")
}

model QuizNote {
  id          String       @id
  quizId      String       @map("quiz_id")
  userId      String       @map("user_id")
  noteType    QuizNoteType @map("note_type")
  submittedAt DateTime     @map("submitted_at")

  quiz Quiz @relation(fields: [quizId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("quiz_note")
}

model QuizQuestion {
  id          String @id
  quizId      String @map("quiz_id")
  question    String?
  answer      String?
  questionNum Int @map("question_num")

  results QuizCompletionQuestionResult[]
  quiz Quiz @relation(fields: [quizId], references: [id])

  @@unique([quizId, questionNum])
  @@map("quiz_question")
}

model User {
  id    String  @id
  email String
  name  String?

  roles           UserRole[]
  quizCompletions QuizCompletionUser[]
  quizNotes       QuizNote[]
  uploadedQuizzes Quiz[]

  @@map("user")
}

enum QuizNoteType {
  ILLEGIBLE
  INACCURATE_OCR
}

enum Role {
  USER
  ADMIN

  @@map("role")
}

model UserRole {
  userId String @map("user_id")
  role   Role

  user User @relation(fields: [userId], references: [id])

  @@id([userId, role])
  @@map("user_role")
}
