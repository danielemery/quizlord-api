generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_CONNECTION_STRING")
}

enum QuizType {
  BRAINWAVES
  SHARK

  @@map("quiz_type")
}

enum QuizImageState {
  PENDING_UPLOAD
  READY

  @@map("quiz_image_state")
}

model Quiz {
  id         String   @id
  type       QuizType
  date       DateTime @db.Date
  uploadedAt DateTime @map("uploaded_at")
  uploadedBy String   @map("uploaded_by")

  completions QuizCompletion[]
  images      QuizImage[]

  @@unique(fields: [date, type])
  @@map("quiz")
}

enum QuizImageType {
  QUESTION
  ANSWER
  QUESTION_AND_ANSWER

  @@map("quiz_image_type")
}

model QuizImage {
  imageKey String         @id @map("image_key")
  quizId   String         @map("quiz_id")
  type     QuizImageType
  state    QuizImageState

  quiz Quiz @relation(fields: [quizId], references: [id])

  @@map("quiz_image")
}

model QuizCompletion {
  id          String   @id
  quizId      String   @map("quiz_id")
  completedAt DateTime @map("completed_at")
  score       Decimal

  quiz        Quiz                 @relation(fields: [quizId], references: [id])
  completedBy QuizCompletionUser[]
  @@map("quiz_completion")
}

model QuizCompletionUser {
  quizCompletionId String @map("quiz_completion_id")
  userId           String @map("user_id")

  user User @relation(fields: [userId], references: [id])

  quizCompletion QuizCompletion @relation(fields: [quizCompletionId], references: [id])

  @@id([quizCompletionId, userId])
  @@map("quiz_completion_user")
}

model User {
  id    String @id
  email String

  roles           UserRole[]
  quizCompletions QuizCompletionUser[]

  @@map("user")
}

enum Role {
  USER
  ADMIN

  @@map("role")
}

model UserRole {
  userId String @map("user_id")
  role   Role

  user User @relation(fields: [userId], references: [id])

  @@id([userId, role])
  @@map("user_role")
}
